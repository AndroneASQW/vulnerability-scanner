const nfBrowser = require('enhanced-browser');
const logger = require('../utils/logger');

/**
 * Extract text from a page, based on an options object.
 * 
 * @param {newsfeelBrowser.NewsFeelPage} newsFeelPage.
 * @param {newsExtractor.options.ParseOptions} options. 
 */
async function extractText(newsFeelPage, options) {
    const selector = options.getSelectorSafe();
    let ignore = options.getValue('ignore');
    const extractMultiple = options.getValue('selectAll', false);
    let separator = null;
    let result = null;
    
    if (!Array.isArray(ignore) && ignore !== null)
        ignore = [ignore];

    try {
        if (extractMultiple) {
            separator = options.getValue('separator', '\n');
            result = await newsFeelPage.extractTextMultiple(
                selector, ignore, separator,
            );
        }
        else
            result = await newsFeelPage.extractText(selector, ignore);
        
        const extractionOptions = {
            selector, ignore, extractMultiple, separator,
        };
        if (result)
            // Log the extraction
            logExtraction(
                options.itemName, newsFeelPage.url(), 
                JSON.stringify(extractionOptions), 'text',
                
            );
        else
            // We did not get any result
            logUnexpectedExtraction(
                result, newsFeelPage.url(), JSON.stringify(extractionOptions),
                options.itemName, 'text',
            );
        
        // Now, refresh the page
        await newsFeelPage.refresh();   

        // Log the refresh event
        logger.info(`Refreshed "${newsFeelPage.url()}"`, 'page-refresh');
    } catch (error) {
        handleError(error, options.itemName);
    }

    return result;
}

/**
 * Extract attributes from a page, based on an options object.
 * 
 * @param {newsfeelBrowser.NewsFeelPage} newsFeelPage.
 * @param {newsExtractor.options.ParseOptions} options. 
 */
async function extractAttributes(newsFeelPage, options) {
    const selector = options.getSelectorSafe();
    const attributes = options.getAttributesSafe();
    let result = null;

    try {
        result = await newsFeelPage.extractAttributes(selector, attributes);

        if (result)
            // Log the extraction
            logExtraction(
                options.itemName, newsFeelPage.url(), 
                JSON.stringify({selector, attributes}), 'attributes',
            );
        else
            // Log unexpected result
            logUnexpectedExtraction(
                result, newsFeelPage.url(), 
                JSON.stringify({selector, attributes}), options.itemName,
                'attributes',
            );
    } catch (error) {
        handleError(error, options.itemName);
    }

    return result;
}

/**
 * Extract HTML from a page, based on an options object.
 * 
 * @param {newsfeelBrowser.NewsFeelPage} newsFeelPage.
 * @param {newsExtractor.options.ParseOptions} options. 
 */

async function extractRaw(newsFeelPage, options) {
    const selector = options.getSelectorSafe();
    let result = null;

    try {
        result = await newsFeelPage.extractHTML(selector);

        if (result)
            // Log the extraction
            logExtraction(
                options.itemName, newsFeelPage.url(), 
                JSON.stringify({selector}), 'html',
            );
        else 
            // Log unexpected result
            logUnexpectedExtraction(
                result, newsFeelPage.url(), JSON.stringify({selector}),
                options.itemName, 'html'
            );
    } catch (error) {
        handleError(error, options.itemName);
    }
    return result;
}

/**
 * Extract links from a page, based on an options object.
 * 
 * @param {newsfeelBrowser.NewsFeelPage} newsFeelPage.
 * @param {newsExtractor.options.ParseOptions} options. 
 */
async function extractLinks(newsFeelPage, options) {
    const selector = options.getSelectorSafe();
    let result = null;

    try {
        result = await newsFeelPage.extractLinks(selector);

        if (result)
            // Log the extraction
            logExtraction(
                options.itemName, newsFeelPage.url(), 
                JSON.stringify({selector}), 'links'
            );
        else 
            // Log the unexepected result
            logUnexpectedExtraction(
                result, newsFeelPage.url(), JSON.stringify({selector}),
                options.itemName, 'links',
            )
    } catch (error) {
        handleError(error, options.itemName);
    }

    return result;
}

/**
 * Log a successful extraction.
 * 
 * It will be logged at `info` level.
 * 
 * @param {string} extractedItem Name of the item that was extracted.
 * @param {string} url Url of the page where the extraction happened.
 * @param {Object} options Options used in the extraction step.
 * @param {string} extractMode Mode used in extraction.
 */
function logExtraction(extractedItem, url, options, extractMode) {
    const loggingMessage = (
        `Extracted ${extractedItem} from "${url}" with options: ${options}`
    );
    logger.info(loggingMessage, `extracted-${extractMode}`);
}

/**
 * Handle an error caught while performing an extraction.
 * 
 * First, the error will be logged, no matter what it is. Then,
 * if is an instance of `nfBrowser.errors.pageErrors.PageError`,
 * the execution will continue, otherwise it the error will 
 * be rethrown.
 * 
 * @param {Error} error The error that should be handled.
 * @param {string} itemName Name of the item that was being extracted 
 * when the error was caught.
 */
function handleError(error, itemName) {
    const errorMessage = `Error extracting "${itemName}": ${error.message}`;
    logger.error(error.constructor.name, errorMessage);

    if (!(error instanceof nfBrowser.errors.pageErrors.PageError))
        // It's a different error, this will be rethrown
        throw error;
}

/**
 * Log an unexpected extraction result.
 * 
 * This will be logged at `warn` level.
 * 
 * @param {Object} result The result that was not expected.
 * @param {string} url Url of the page where the extraction was attempted.
 * @param {string} options Options used in the attempted extraction.
 * @param {string} item What section from the website map was attempted.
 * @param {string} mode What the extractor tried to extract.
 */
function logUnexpectedExtraction(result, url, options, item, mode) {
    const logMessage = [
        `Tried to extract ${item} from "${url}" and got: "${result}". `,
        'Options: ', options,
    ].join(' ');
    logger.warning(logMessage, `invalid-extraction-${mode}`);
}

module.exports = {
    text: extractText,
    attributes: extractAttributes,
    raw: extractRaw,
    links: extractLinks,
}
