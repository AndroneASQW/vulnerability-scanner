const options = require('../extractor/options');
const extractorAPI = require('../extractor/api');
const logger = require('../utils/logger');
const nfsErrors = require('../errors/newsfeelServiceErrors');
const { cleanupUrl } = require('../utils/stringManipulation');
const propertiesReader = require('properties-reader');
const { NewsFeelServiceCommunicator } = require('../utils/newsfeelServiceCommunicator');

class Scheduler {
    /**
     * 
     * @param {NewsfeelBrowser} browser - NewsfeelBrowser instance to be
     * used by the scheduler.
     * @param {NewsfeelServiceCommunicator} newsFeelServiceCommunicator -
     * Used to communicate with a `newsfeel-service` instance.
     */
    constructor (browser, propsFilePath) {
        this.browser = browser;
        this.nfsCommunicator = new NewsFeelServiceCommunicator(propsFilePath);
        this.props = propertiesReader(
            propsFilePath, 'utf-8', { allowDuplicateSections: true }
        );
    }

    /**
     * Get all urls that should be extracted from a given news source.
     * 
     * @param {NewsFeelPage} page - The home page of the news source or
     * any other page that lists articles fromt that specific source.
     * @param {SourceOptions} siteMap - Parsed options file for this specific
     * news source.
     * 
     * @returns {Array<string>} - With all the urls that should be sent to the
     * extractor. 
     */
    async getUrlsToExtract(page, siteMap) {
        let urls = await page.extractLinks(siteMap.homepageLinksSelector);
        urls = urls.map((url) => cleanupUrl(url));

        // Remove duplicates
        urls = [...new Set(urls)];

        // Exclude all urls that are part of the `ignore` section
        // of `siteMap`.
        if (siteMap.ignoreLinks) {
            urls = urls.filter((url) => siteMap.ignoreLinks.indexOf(url) == -1);
        }

        // Remove all 3rd party urls
        const origin = page.origin();
        urls = urls.filter((url) => url.startsWith(origin));

        // Return what's missing from DB.
        try {
            if (urls.length > 0) {
                let missingUrls = [];
                missingUrls = [... new Set(
                    await this.nfsCommunicator.getNewUrls(urls)
                )];
                return missingUrls;
            }
            return [];
        } catch (_err) {
            this._handleCommunicatorError(_err);
            return [];
        }
    }

    /**
     * Extract data from a given article Url.
     * 
     * @param {string} url - The url the data should be extracted from.
     * @param {SourceOptions} siteMap - Parsed options file for this specific
     * news source.
     * 
     * @returns {Object} - With the extracted data.
     */
    async extractData(url, siteMap) {
        let page;
        try {
            page = await this.browser.getNewsfeelPageFor(url);
            logger.info(`Loaded article from ${url}`,'Scheduler');
        } catch (error) {
            logger.error('Scheduler', error.message);
            return null;
        }

        const extractedData = await extractorAPI.extractFromNewsFeelPage(
            page, siteMap,
        );

        extractedData.extractTimestamp = Date.now();
        extractedData.rawUrl = url;
        extractedData.url = cleanupUrl(url);
        extractedData.originPageUrl = this.originPage;
        extractedData.sourceName = siteMap.sourceName;

        await page.close();
        logger.info(`Closed page ${url}`);

        return extractedData;
    }

    /**
     * Extract data and send it to newsfeel-service.
     * 
     * @param {string} pageUrl - url to the home page of the news source or
     * any other page that lists articles from that specific source.
     * @param {string} siteMapPath - path to the source map that should be used
     * for parsing articles from this source.
     */
    async extractAndSend(pageUrl, siteMapPath) {
        this.originPage = pageUrl;

        let page;
        let siteMap;
        try {
            page = await this.browser.getNewsfeelPageFor(pageUrl);
            logger.info(`Loaded ${pageUrl} in NewsfeelBrowser`, 'Scheduler');

            siteMap = await options.SourceOptions.fromYAML(siteMapPath);
            logger.info(`Loaded sitemap from ${siteMapPath}`, 'Scheduler');
        } catch (error) {
            logger.error('Scheduler', error.message);
            throw error;
        }

        const urlsToExtract = await this.getUrlsToExtract(page, siteMap);
        if (urlsToExtract.length > 0)
            logger.info(
                `Extracting data from ${urlsToExtract.length} articles.`,
                'Scheduler',
            );
        else
            logger.info(
                `No new articles found for ${pageUrl}`, 'Scheduler',
            );

        // TODO: send them as batch.
        for (let url of urlsToExtract) {
            const article = await this.extractData(url, siteMap);
            if (article != null) {
                try {
                    await this.nfsCommunicator.send(article);
                } catch (_err) {
                    // TODO: Add logic here to save the artcicle data locally  
                    this._handleCommunicatorError(_err);
                }
            }
        }
    }

    _handleCommunicatorError(error) {
        // If nfService returns anything other than a response with
        // status code 200, the error is already handled by 
        // nfCommunicator, and we will ignore it and move forward.
        if (error instanceof nfsErrors.NewsFeelServiceHTTPError)
            return;

        // Otherwise, if the error comes up from anywhere else, 
        // we log it here and throw, since we don't know what it is about.
        const errorMessage = (
            `[Scheduler] Error sending data to newsfeel service - ${error.message}`
        );
        logger.error(error.constructor.name, errorMessage);
        throw error;
    }
}

module.exports = {
    Scheduler,
};
