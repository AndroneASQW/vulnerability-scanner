const {createLogger, format, transports} = require('winston');
const {combine, timestamp, printf} = format;

var logger;

/**
 * Configure logger to write to `filePath`.
 * 
 * This should only be called at the start of a script.
 * 
 * @param {string} filePath Path to the file the logs should be written to.
 */
function setupFileLogger(filePath) {
    const logFormat = printf(({ level, message, label, timestamp }) => {
        return `${timestamp} [${label}] ${level}: ${message}`;
    });

    logger = new createLogger({
        format: combine(
            timestamp(),
            logFormat,
        ),
        transports: [
          new (transports.File)({ 
              filename: filePath, 
              level: 'info',
            }),
          new transports.Console()  
        ]
      });

}

/**
 * Write a custom log message to the logger.
 * 
 * If the logger is not initialized, nothing will be logged.
 * 
 * @param {string} level Logging level. One of: `error`, `warn`, `info`
 * @param {string} message The message to be logged.
 * @param {string} label Label to be associated with the log.
 * 
 */
function log(level, message, label) {
    if (logger)
        logger.log({level, message, label});
}

/** 
 * Log at error level.
 * 
 * Logging format:
 * 
 * <timestmap> [<error name>] error: <error message>
 * 
 * @param {string} errorName Name of the error that will be logged.
 * @param {string} errorMessage Message to be logged.
*/

function error(errorName, errorMessage) {
    log(
        'error',
        errorMessage,
        errorName,
    );
}

/**
 * Log at warn level.
 * 
 * Logging format:
 * 
 * <timestmap> [<label>] warn: <message>
 * 
 * @param {string} message Message to be logged
 * @param {string} label Label to be added to the log message.
 */
function warning(message, label) {
    log(
        'warn',
        message,
        label ? label : 'Warning'
    );
}

/**
 * Log at info level.
 * 
 * Logging format:
 * 
 * <timestmap> [<label>] info: <message>
 * 
 * @param {string} message Message to be logged
 * @param {string} label Label to be added to the log message.
 */
function info(message, label) {
    log(
        'info',
        message,
        label ? label : 'Info'
    );
}

function stopLogging() {
    logger = undefined;
}

module.exports = {
    setupFileLogger,
    log,
    error, 
    warning,
    info,
    stopLogging,
};
