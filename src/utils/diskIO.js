const yaml = require('yaml');
const fs = require('fs');
const path = require('path');
const logger = require('./logger');

/**
 * Read the contents of a file and return them as strings.
 * 
 * @param {string} filePath - Path to the file whos econtents should
 *  be read.
 * @returns {string} - The file contents.
 */
function readFile(filePath) {
    return fs
        .readFileSync(filePath, 'utf-8')
        .toString();
}

/**
 * Parse a yaml file.
 * 
 * @param {string} filePath - Path to the yaml file that should be
 *  parsed.
 * @returns {Object} - the Object resulting from parsing the Yaml file.
 */
async function parseYaml(filePath) {
    const fileContents = readFile(filePath);
    const parsed = await yaml.parse(fileContents);

    return parsed;
}

/**
 * Write data to a file.
 * 
 * @param {string} filePath - Path to the file we want to write to.
 * @param {*} data - The data that should be written to this file.
 */
function writeDataToFile(filePath, data) {
    fs.writeFileSync(filePath, data, {encoding: 'utf-8'});
}

/**
 * Get path for a file where data about an article 
 * should be saved on disk.
 * 
 * The file name will be generated by first replacing all `.`
 * and `\` characters with `_` (in order to avoid file system 
 * confusions), then adding the timestamp and the `.json`
 * extension.
 * 
 * @param {string} dataDir - Path to the directory where the 
 *  article data is stored.
 * @param {string} sourceDir - Path to the data sub-directory
 *  for a specific news source.
 * @param {string} url - Url of the article that needs to be
 *  saved.
 * @param {boolean} ensureParentExists - Whether to make sure the parent
 *  directory path exists or not. If this is set to `true`, the directory
 *  will be created.
 * 
 * @returns {string} - The resulting path.
 */
function generateNewsFilePath(dataDir, sourceDir, url, ensureParentExists) {
    const cleanUrl = url
        .replaceAll('.', '_')
        .replaceAll('/', '__');
    const fileName = `${cleanUrl}_${Date.now()}.json`;

    if (ensureParentExists) {
        const parentDirPath = path.join(
            dataDir, sourceDir,
        );

        if (!fs.existsSync(parentDirPath)) 
            fs.mkdirSync(parentDirPath, {recursive: true});
    }

    return path.join(
        dataDir, sourceDir, fileName,
    );
}


/**
 * Write article data to a JSON file.
 * 
 * @param {string} dataDir - Path to the directory where the data is stored.
 * @param {string} sourceDir - Path to the source-specific data directory,
 *  relative to `dataDir`.
 * @param {Object} data - JSON-serializable object with the data that should
 *  be written to disk.
 * 
 * @returns {string} Path of the file the data was written to.
 */
function writeNewsData(dataDir, sourceDir, data) {
    const filePath = generateNewsFilePath(
        dataDir, sourceDir, data.url, true,
    );
    const jsonifiedData = JSON.stringify(data);
    
    try {
        writeDataToFile(filePath, jsonifiedData);
        logger.info(`Wrote extraction result at: ${filePath}`, 'Info');
    } catch (error) {
        logger.error(error.constructor.name, error.message);
        throw error;
    }
    return filePath;
}

module.exports = {
    readFile,
    parseYaml,
    writeDataToFile,
    writeNewsData,
    generateNewsFilePath,
}