const axios = require('axios');
const propertiesReader = require('properties-reader');
const logger = require('./logger');
const errors = require('../errors/newsfeelServiceErrors');

class NewsFeelServiceCommunicator {
    /**
     * 
     * @param {string} propsFilePath - Path to the properties file used
     * to connect to Newsfeel Service.
     */
    constructor(propsFilePath) {
        this.props = propertiesReader(
            propsFilePath, 'utf-8', { allowDuplicateSections: true }
        );
        this.axiosInstance = axios.create({
            baseURL: this.props.get('newsfeel.service.endpoint'),
            timeout: 100000,
        });
        logger.info(`Newsfeel-service endpoint reachable at ${this.props.get('newsfeel.service.endpoint')}.`)
        logger.info(
            `Initialised NewsFeelServiceCommunicator from "${propsFilePath}."`,
            'NewsFeelServiceCommunicator',
        );

        this.requestFunctions = {
            PUT: this.axiosInstance.put,
            POST: this.axiosInstance.post,
        }
    }

    async __makeRequest(endpoint, body, requestType, headers) {
        const reqFunction = this.requestFunctions[requestType];

        const response = await reqFunction(
            endpoint,
            body,
            {headers: headers}
        );

        if (response.statusCode < 200 || response.statusCode > 299) {
            const error = new errors.NewsFeelServiceHTTPError(
                requestType, endpoint, 
                response.statusCode, response.statusText,
            );
            logger.error('NewsFeelServiceHTTPError', error.message);
            throw error;
        }

        return response;
    }

    /**
     * Send article to `newsfeel-service`.
     * 
     * @param {Object} article - The article that should be sent to `newsfeel-service`.
     */
    async send(article) {
        const endpoint = this.props.get('newsfeel.service.insert.one.endpoint');
        const response = await this.__makeRequest(
            endpoint,
            article,
            'POST',
            {'Content-Type': 'application/json'},
        );

        logger.info(
            `Sent extraction result to newsfeel-service, at ${endpoint}`,
            'NewsFeelServiceCommunicator'
        );

        return response;
    }

    /**
     * Get the information regarding urls existance in the database.
     * 
     * @param {Array<string>} urls - The URLs of the articles that 
     * need to be checked.
     * 
     * @returns {Array<boolean>} A dictionary with key (urls) and values (false/true)
     * suggesting if the url was found in the database.
     */
    async dbContains(urls) {
        if (urls.length == 0) {
            return {};
        }

        let nfsEndpoint = this.props.get('newsfeel.service.have-in-database.endpoint');
        if (urls.length > 1) {
            nfsEndpoint = this.props.get('newsfeel.service.have-in-database-multiple.endpoint');
        }

        let response = await this.__makeRequest(
            nfsEndpoint,
            urls,
            'POST',
            {'Content-Type': 'application/json'},
        );

        logger.info(
            `Checked ${urls.length} urls to see if they are in the database`,
            'NewsFeelServiceCommunicator'
        );

        return response.data;
    }

    /**
     * Get the subset of urls that are not yet in the database.
     * 
     * @param {Array<string>} urls - List of urls that need to be checked.
     * 
     * @returns {Array<string>} A subset of `urls`, with the urls that are
     * not in the database.
     * @throws {errors.NewsFeelServiceHTTPError} If the request returns
     * anything other than statusCode 200.
     */
    async getNewUrls(urls) {
        let nfsEndpoint = this.props.get(
            'newsfeel.service.batch.news.does-not-exist.endpoint'
        );

        let response = await this.__makeRequest(
            nfsEndpoint,
            urls,
            'POST',
            {'Content-Type': 'application/json'},
        );

        logger.info(
            `Sent ${urls.length} urls to newsfeel-service to see 
            which ones are new.`, 'NewsFeelServiceCommunicator',
        );
        
        return response.data;
    }
}

module.exports = {
    NewsFeelServiceCommunicator
};
