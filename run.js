const { parseRunScriptArguments } = require('./src/utils/cliArgumentParsing');
const { setupFileLogger, setupGoogleCloudLogger } = require('./src/utils/logger');
const { launchHeadfulBrowserDefault} = require('enhanced-browser');
const logger = require('./src/utils/logger');
const extractorAPI = require('./src/extractor/api');
const { Scheduler } = require('./src/scheduler/scheduler');

(async () => {
    const args = parseRunScriptArguments();

    // Check arguments
    if (args._.length == 0) {
        console.log(
            'No running mode specified. Run `npm run --help` for more details.'
        );
        process.exit();
    }
    const runningMode = args._[0];
    const supportedModes = ['extract', 'follow-links-extract'];
    if (!supportedModes.includes(runningMode)) {
        console.log(
            `Running mode not supported. Expected one of ${supportedModes}.`
        );
        process.exit();
    }

    // Initialize logger
    console.log(`Setting up logger at ${args.logFile}`);
    setupFileLogger(args.logFile);
    logger.info('Started job');

    logger.info("Initializing Chromium browser.")
    const browser = await launchHeadfulBrowserDefault(
        args.chromeProfile, args.abpPath,
    );
    logger.info('Initialized browser successfully');
    
    const page = await browser.chromium.newPage();
    await page.goto(`https://login.yahoo.com/?.src=ym&lang=ro-RO&done=https%3A%2F%2Fmail.yahoo.com%2F%3Fguce_referrer%3DaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8%26guce_referrer_sig%3DAQAAAHVhlihwRjioMSvBwrkEkpp0Fd8Q82Dv5YuOEiICoqqrZLEuWKxkbk-QAuCPX6tCEdDER_055y6Eix8ydR28ahZJdOYGkH4h_JeGl4-fAqtIJ8clGaRX1ntBEORHATSf-3dF7bXAwcZdzpSQj56XOpRxWh55OE7eWuJzf8S7-Rpa}`);
    const links = await page.$$eval('a', (elements) => elements.map(el => el.href));
    console.log(links)




    // try {
    //     if (args._[0] == "extract") {
    //         await extractorAPI.runExtractionWithArguments(browser, args);
    //     } else {
    //         const scheduler = new Scheduler(browser, args.props);
    //         await extractorAPI.runFollowLinksExtraction(scheduler, args);
    //     }
    // } finally {
    await browser.close();
    logger.info('Job finished', 'Info');
    // }
})();
