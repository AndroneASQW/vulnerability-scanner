const path = require('path')

const options = require('../../src/extractor/options');
const extractionErrors = require('../../src/errors/extractionErrors');

test('Test SourceOptions is instantiated correctly', async () => {
    const sourceOptions = await options.SourceOptions.fromYAML(
        'tests/data/testMapWithIgnores.yaml'
    );

    expect(sourceOptions.optionsFile)
        .toStrictEqual(path.resolve('tests/data/testMapWithIgnores.yaml'));
    expect(sourceOptions.ignoreLinks)
        .toStrictEqual(['https://www.google.com', 'https://www.test.com']);
    expect(sourceOptions.parseOptions)
        .toBeInstanceOf(Array);
    expect(sourceOptions.homepageLinksSelector)
        .toStrictEqual('body');
    for (let parseOption of sourceOptions.parseOptions)
        expect(parseOption)
            .toBeInstanceOf(options.ParseOptions);
});

test('Test SourceOptions is instantiated correctly-no ignores', async () => {
    const sourceOptions = await options.SourceOptions.fromYAML(
        'tests/data/testMapNoIgnores.yaml'
    );

    expect(sourceOptions.ignoreLinks)
        .toStrictEqual([]);
});


test('Test ParseOptions is instantiated correctly', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2}, [1, 2, 3], 'test', 'test.yaml'
    );

    expect(parseOptions.a).toStrictEqual(1);
    expect(parseOptions.b).toStrictEqual(2);
    expect(parseOptions.ignoreLinks).toStrictEqual([1, 2, 3]);
    expect(parseOptions.itemName).toStrictEqual('test');
    expect(parseOptions.sourcePath).toStrictEqual('test.yaml');
});

test('Test ParseOptions.getSelectorSafe - no error', () => {
    const parseOptions = new options.ParseOptions(
        {selector: 'some-selector'}, [1, 2, 3], 'test', 'test.yaml'
    );

    expect(parseOptions.getSelectorSafe())
        .toStrictEqual('some-selector');
});

test('Test ParseOptions.getSelectorSafe - error thrown', () => {
    const parseOptions = new options.ParseOptions(
        {notASelector: 'some-selector'}, [1, 2, 3], 'test', 'test.yaml'
    );
    
    try {
        parseOptions.getSelectorSafe();
    } catch (e) {
        expect(e).toBeInstanceOf(extractionErrors.SelectorNotFoundError);
        expect(e.configFile).toStrictEqual('test.yaml');
        expect(e.itemName).toStrictEqual('test');
        expect(e.message).toStrictEqual(
            'No selector found in cofiguration file test.yaml, at test'
        );
    }
});

test('Test ParseOptions.getValue - existing', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2}, [1, 2, 3], 'test', 'test.yaml'
    );

    expect(parseOptions.getValue('a')).toStrictEqual(1);
});

test('Test ParseOptions.getValue - with default', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2}, [1, 2, 3], 'test', 'test.yaml'
    );

    expect(parseOptions.getValue('c')).toBeNull;
})

test('Test ParseOptions.getValue - with custom default', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2}, [1, 2, 3], 'test', 'test.yaml'
    );

    expect(parseOptions.getValue('c', 'testing'))
        .toStrictEqual('testing');
});

test('Test ParseOptions.getExtractionFunction - no error', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2, extract: 'text'}, [1, 2, 3], 'test', 'test.yaml'
    );
    
    expect(parseOptions.getExtractionFunction()).toBeInstanceOf(Function);
});

test('Test ParseOptions.getExtionFunction - no extract key', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2}, [1, 2, 3], 'test', 'test.yaml'
    );
    
    try {
        parseOptions.getExtractionFunction();
    } catch (e) {
        expect(e).toBeInstanceOf(extractionErrors.ExtractKeyNotFoundError);
        expect(e.configFile).toStrictEqual('test.yaml');
        expect(e.itemName).toStrictEqual('test');
    }
});


test('Test ParseOptions.getExtractionFunction - mode not supported', () => {
    const parseOptions = new options.ParseOptions(
        {a: 1, b: 2, extract: 'not-supported'}, [1, 2, 3], 'test', 'test.yaml'
    );
    
    try {
        parseOptions.getExtractionFunction();
    } catch (e) {
        expect(e)
            .toBeInstanceOf(extractionErrors.ExtractionModeNotSupportedError);
        expect(e.configFile).toStrictEqual('test.yaml');
        expect(e.itemName).toStrictEqual('test');
        expect(e.mode).toStrictEqual('not-supported');
    }
});

test('Test ParseOptions.getAttributesSafe - no error', () => {
    const parseOptions = new options.ParseOptions(
        {attributes: ['a1', 'a2']}, [1, 2, 3], 'test', 'test.yaml'
    );

    expect(parseOptions.getAttributesSafe())
        .toStrictEqual(['a1', 'a2']);
});

test('Test ParseOptions.getAttributesSafe - no attributes key', () => {
    const parseOptions = new options.ParseOptions(
        {stuff: ['a1', 'a2']}, [1, 2, 3], 'test', 'test.yaml'
    );
    
    try {
        parseOptions.getAttributesSafe();
    } catch (e) {
        expect(e).toBeInstanceOf(extractionErrors.AttributesNotFoundError);
        expect(e.configFile).toStrictEqual('test.yaml');
        expect(e.itemName).toStrictEqual('test');
    }
});
