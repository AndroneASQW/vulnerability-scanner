const extractorOptions = require('../../src/extractor/options');
const extractorAPI = require('../../src/extractor/api');
const mockNfPage = require('./mockNewsFeelPage');
const diskIO = require('../../src/utils/diskIO');
const jetpack = require('fs-jetpack');
const mockDate = require('mockdate');
const os = require('os');
const path = require('path');
const fs = require('fs');

test('Test extract from NewsFeelPage', async () => {
    // Creating mock site map and newsfeel page.
    const siteMap = await extractorOptions.SourceOptions.fromYAML(
        'tests/data/testSiteMap.yaml'
    );
    const newsFeelPage = new mockNfPage.EmptyMockNewsfeelPage();

    // Setting up jest spies
    const spies = {
        textSpy: jest.spyOn(newsFeelPage, 'extractText'),
        attributesSpy: jest.spyOn(newsFeelPage, 'extractAttributes'),
        htmlSpy: jest.spyOn(newsFeelPage, 'extractHTML'),
        linksSpy: jest.spyOn(newsFeelPage, 'extractLinks'),
        refreshSpy: jest.spyOn(newsFeelPage, 'refresh'),
    };

    // Running the extractor API
    const result = await extractorAPI.extractFromNewsFeelPage(
        newsFeelPage, siteMap
    );

    // Checking the result contents
    expect(Object.keys(result))
        .toStrictEqual(['title', 'timestamp', 'content', 'html', 'links']);

    // Check the appropriate function calls were made
    expect(spies.attributesSpy)
        .toHaveBeenCalledTimes(1);
    expect(spies.attributesSpy)
        .toHaveBeenCalledWith('some-selector', ['attribute']);
    
    expect(spies.refreshSpy)
        .toHaveBeenCalledTimes(2);
    
    expect(spies.textSpy)
        .toHaveBeenCalledTimes(2);
    expect(spies.textSpy)
        .toHaveBeenNthCalledWith(1, 'another-selector', null);
    expect(spies.textSpy)
        .toHaveBeenNthCalledWith(2, 'one-more-selector', ['ignore-selector']);

    expect(spies.htmlSpy)
        .toHaveBeenCalledTimes(1);
    expect(spies.htmlSpy)
        .toHaveBeenCalledWith('close-to-last-selector');

    expect(spies.linksSpy)
        .toHaveBeenCalledTimes(1); 
});


test('Test run extraction with arguments', async () => {
    const tmp = jetpack.tmpDir({basePath: os.tmpdir()});
    mockDate.set(1234567);
    const dataDir = tmp.cwd();
    const args = {
        map: 'tests/data/testSiteMap.yaml',
        url: 'https://www.test.com#test',
        output: dataDir,
    };
    const browser = new mockNfPage.MockNewsFeelBrowser();
    const newsFeelPage = await browser.getNewsfeelPageFor();
    const spies = {
        textSpy: jest.spyOn(newsFeelPage, 'extractText'),
        attributesSpy: jest.spyOn(newsFeelPage, 'extractAttributes'),
        htmlSpy: jest.spyOn(newsFeelPage, 'extractHTML'),
        linksSpy: jest.spyOn(newsFeelPage, 'extractLinks'),
        refreshSpy: jest.spyOn(newsFeelPage, 'refresh'),
        diskIOSpy: jest.spyOn(diskIO, 'writeNewsData'),
    };

    await extractorAPI.runExtractionWithArguments(browser, args);

    // Check the appropriate function calls were made
    expect(spies.attributesSpy)
        .toHaveBeenCalledTimes(1);
    expect(spies.attributesSpy)
        .toHaveBeenCalledWith('some-selector', ['attribute']);
    
    expect(spies.refreshSpy)
        .toHaveBeenCalledTimes(2);
    
    expect(spies.textSpy)
        .toHaveBeenCalledTimes(2);
    expect(spies.textSpy)
        .toHaveBeenNthCalledWith(1, 'another-selector', null);
    expect(spies.textSpy)
        .toHaveBeenNthCalledWith(2, 'one-more-selector', ['ignore-selector']);

    expect(spies.htmlSpy)
        .toHaveBeenCalledTimes(1);
    expect(spies.htmlSpy)
        .toHaveBeenCalledWith('close-to-last-selector');

    expect(spies.linksSpy)
        .toHaveBeenCalledTimes(1);

    expect(spies.diskIOSpy)
        .toHaveBeenCalledTimes(1);

    // Check that the appropriate file was saved to disk
    const filePath = path.join(dataDir, 'https:____www_test_com_1234567.json');
    expect(fs.existsSync(filePath))
        .toBeTrue;
    const fileContents = JSON.parse(fs.readFileSync(filePath).toString());
    expect(Object.keys(fileContents)).toStrictEqual([
        'rawUrl', 'url', 'extractionTimestamp',
    ]);
    expect(fileContents.rawUrl)
        .toStrictEqual('https://www.test.com#test');
    expect(fileContents.url)
        .toStrictEqual('https://www.test.com');

    mockDate.reset();
    tmp.remove();
});
