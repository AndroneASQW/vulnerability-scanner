const extractors = require('../../../src/extractor/extractors');
const options = require('../../../src/extractor/options');
const logger = require('../../../src/utils/logger');

class MockNewsfeelPage {
    async extractText(selector, ignore) {
        return 'Some text';
    }

    async extractTextMultiple(selector, ignore, separator) {
        return 'Some text multiple';
    }

    async extractAttributes(selector, attributes) {
        return 'Some attributes';
    }

    async extractHTML(selector) {
        return 'Some html';
    }

    async extractLinks(selector) {
        return 'Some links';
    }

    async refresh() {
        // Do nothing.
    }

    url() {
        return 'www.test.com';
    }
}

afterEach(() => {
    jest.clearAllMocks();
});

async function runTest(testToRun) {
    const newsFeelPage = new MockNewsfeelPage();
    const spies = {
        loggerInfoSpy: jest.spyOn(logger, 'info'),
        loggerErrorSpy: jest.spyOn(logger, 'error'),
        loggerWarnSpy: jest.spyOn(logger, 'warning'),
    };

    const parseOptions = new options.ParseOptions(
        {selector: 'selector', attributes: ['a1', 'a2']},
        [],
        'test',
        'test.yaml',
    );
    const expectedResults = await testToRun(newsFeelPage, parseOptions, spies);

    expect(spies.loggerInfoSpy)
        .toHaveBeenCalledTimes(expectedResults.length);
    let count = 1;
    for (let expectedResult of expectedResults)   {
        expect(spies.loggerInfoSpy)
            .toHaveBeenNthCalledWith(count, ...expectedResult);
        count += 1;
    }

    expect(spies.loggerErrorSpy).not.toHaveBeenCalled();
    expect(spies.loggerWarnSpy).not.toHaveBeenCalled();
}

test('Test logging - text extraction', async () => {
    await runTest(async (newsFeelPage, parseOptions, spies) => {
        await extractors.text(newsFeelPage, parseOptions);

        const options = JSON.stringify({
            selector: 'selector', ignore: null, extractMultiple: false,
            separator: null,
        });
        const expectedLog = (
            `Extracted test from "www.test.com" with options: ${options}`
        );

        return [
            [expectedLog, 'extracted-text'], 
            ['Refreshed "www.test.com"', 'page-refresh'],
        ];
    });
});

test('Test logging - attribute extraction', async () => {
    await runTest(async (newsFeelPage, parseOptions, spies) => {
        await extractors.attributes(newsFeelPage, parseOptions);

        const options = JSON.stringify({
            selector: 'selector', attributes: ['a1', 'a2']
        });
        const expectedLog = (
            `Extracted test from "www.test.com" with options: ${options}`
        );

        return [[expectedLog, 'extracted-attributes']]
    });
});

test('Test logging - html extraction', async () => {
    await runTest(async (newsFeelPage, parseOptions, spies) => {
        await extractors.raw(newsFeelPage, parseOptions);

        const options = JSON.stringify({selector: 'selector'});
        const expectedLog = (
            `Extracted test from "www.test.com" with options: ${options}`
        );

        return [[expectedLog, 'extracted-html']]
    });
});

test('Test logging - links extraction', async () => {
    await runTest(async (newsFeelPage, parseOptions, spies) => {
        await extractors.links(newsFeelPage, parseOptions);

        const options = JSON.stringify({selector: 'selector'});
        const expectedLog = (
            `Extracted test from "www.test.com" with options: ${options}`
        );
        
        return [[expectedLog, 'extracted-links']]
    });
});
