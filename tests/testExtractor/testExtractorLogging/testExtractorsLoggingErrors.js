const extractors = require('../../../src/extractor/extractors');
const options = require('../../../src/extractor/options');
const logger = require('../../../src/utils/logger');
const nfBrowser = require('enhanced-browser');

class MockNewsfeelPage {
    async extractText(selector, ignore) {
        throw new Error('Error text single extraction');
    }

    async extractTextMultiple(selector, ignore, separator) {
        throw new Error('Error text multiple extraction');
    }

    async extractAttributes(selector, attributes) {
        throw new Error('Error attributes extraction');
    }

    async extractHTML(selector) {
        throw new Error('Error html extraction');
    }

    async extractLinks(selector) {
        throw new Error('Error links extraction');
    }

    async refresh() {
        throw new Error('Error page refresh');
    }

    url() {
        return 'www.test.com';
    }
}

afterEach(() => {
    jest.clearAllMocks();
});

async function runTest(testToRun) {
    const newsFeelPage = new MockNewsfeelPage();
    const spies = {
        loggerInfoSpy: jest.spyOn(logger, 'info'),
        loggerErrorSpy: jest.spyOn(logger, 'error'),
        loggerWarnSpy: jest.spyOn(logger, 'warning'),
    };

    const parseOptions = new options.ParseOptions(
        {selector: 'selector', attributes: ['a1', 'a2']},
        [],
        'test',
        'test.yaml',
    );
    const expectedResults = await testToRun(newsFeelPage, parseOptions);

    expect(spies.loggerInfoSpy)
        .toHaveBeenCalledTimes(expectedResults.info.length);
    let count = 1;
    for (let expectedResult of expectedResults.info)   {
        expect(spies.loggerInfoSpy)
            .toHaveBeenNthCalledWith(count, ...expectedResult);
        count += 1;
    }

    expect(spies.loggerErrorSpy)
        .toHaveBeenCalledTimes(expectedResults.error.length);
    
    count = 1;
    for (let expectedResult of expectedResults.error)   {
        expect(spies.loggerErrorSpy)
            .toHaveBeenNthCalledWith(count, ...expectedResult);
        count += 1;
    }

    expect(spies.loggerWarnSpy).not.toHaveBeenCalled();
}

test('Test logging - text extraction - single - Error', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        try {
            await extractors.text(newsFeelPage, parseOptions);
        }
        catch (error) {
            expect(error.message)
                .toStrictEqual('Error text single extraction');
            expect(error).toBeInstanceOf(Error);
        }

        const expectedLog = (
            `Error extracting "test": Error text single extraction`
        );

        return {info: [], error: [['Error', expectedLog]]};
    });
});

test('Test logging - text extraction - multiple - Error', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        parseOptions.selectAll = true;
        try {
            await extractors.text(newsFeelPage, parseOptions);
        }
        catch (error) {
            expect(error.message)
                .toStrictEqual('Error text multiple extraction');
            expect(error).toBeInstanceOf(Error);
        }

        const expectedLog = (
            `Error extracting "test": Error text multiple extraction`
        );

        return {info: [], error: [['Error', expectedLog]]};
    });
});

test('Test logging - text extraction - single - PageError', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        const error = new nfBrowser.errors.pageErrors.PageError(
            'www.test.com', 'error message',
        );
        newsFeelPage.extractText= () => {throw error;};
        await extractors.text(newsFeelPage, parseOptions);

        const expectedLog = (
            `Error extracting "test": ${error.message}`
        );

        return {info: [], error: [['PageError', expectedLog]]};
    });
});

test('Test logging - text extraction - single - PageError', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        parseOptions.selectAll = true;
        const error = new nfBrowser.errors.pageErrors.PageError(
            'www.test.com', 'error message',
        );
        newsFeelPage.extractTextMultiple = () => {throw error;};
        await extractors.text(newsFeelPage, parseOptions);

        const expectedLog = (
            `Error extracting "test": ${error.message}`
        );

        return {info: [], error: [['PageError', expectedLog]]};
    });
});

test('Test logging - attributes extraction - Error', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        try {
            await extractors.attributes(newsFeelPage, parseOptions);
        }
        catch (error) {
            expect(error.message)
                .toStrictEqual('Error attributes extraction');
            expect(error).toBeInstanceOf(Error);
        }

        const expectedLog = (
            `Error extracting "test": Error attributes extraction`
        );

        return {info: [], error: [['Error', expectedLog]]};
    });
});

test('Test logging - attributes extraction - PageError', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        const error = new nfBrowser.errors.pageErrors.PageError(
            'www.test.com', 'error message',
        );
        newsFeelPage.extractAttributes = () => {throw error;};
        await extractors.attributes(newsFeelPage, parseOptions);

        const expectedLog = (
            `Error extracting "test": ${error.message}`
        );

        return {info: [], error: [['PageError', expectedLog]]};
    });
});

test('Test logging - html extraction - PageError', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        const error = new nfBrowser.errors.pageErrors.PageError(
            'www.test.com', 'error message',
        );
        newsFeelPage.extractHTML = () => {throw error;};
        await extractors.raw(newsFeelPage, parseOptions);

        const expectedLog = (
            `Error extracting "test": ${error.message}`
        );

        return {info: [], error: [['PageError', expectedLog]]};
    });
});

test('Test logging - html extraction - Error', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        try {
            await extractors.raw(newsFeelPage, parseOptions);
        }
        catch (error) {
            expect(error.message)
                .toStrictEqual('Error html extraction');
            expect(error).toBeInstanceOf(Error);
        }

        const expectedLog = (
            `Error extracting "test": Error html extraction`
        );

        return {info: [], error: [['Error', expectedLog]]};
    });
});

test('Test logging - links extraction - PageError', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        const error = new nfBrowser.errors.pageErrors.PageError(
            'www.test.com', 'error message',
        );
        newsFeelPage.extractLinks = () => {throw error;};
        await extractors.links(newsFeelPage, parseOptions);

        const expectedLog = (
            `Error extracting "test": ${error.message}`
        );

        return {info: [], error: [['PageError', expectedLog]]};
    });
});

test('Test logging - links extraction - Error', async () => {
    await runTest(async (newsFeelPage, parseOptions) => {
        try {
            await extractors.links(newsFeelPage, parseOptions);
        }
        catch (error) {
            expect(error.message)
                .toStrictEqual('Error links extraction');
            expect(error).toBeInstanceOf(Error);
        }

        const expectedLog = (
            `Error extracting "test": Error links extraction`
        );

        return {info: [], error: [['Error', expectedLog]]};
    });
});
