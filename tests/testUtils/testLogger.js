const logger = require('../../src/utils/logger');
const mockDate = require('mockdate');
const jetpack = require('fs-jetpack');
const testUtils = require('../utils');
const path = require('path');
const os = require('os');

let sandbox = {};
const TEST_TO_SKIP = 'Test no logging works'

beforeEach(() => {
    sandbox.spy = jest.spyOn(logger, 'setupFileLogger');
    const tmp = jetpack.tmpDir({basePath: os.tmpdir()});
    sandbox.tmpDir = tmp;
    sandbox.tmpFile = tmp.file('test.log');
    sandbox.filePath = path.join(tmp.cwd(), 'test.log');
    logger.setupFileLogger(sandbox.filePath);
    mockDate.set(0);
});

afterEach(() => {
    sandbox.tmpDir.remove();
    mockDate.reset();
});

test('Test log function', async () => {
    logger.log('info', 'Test message', 'test-label');
    expected = '1970-01-01T00:00:00.000Z [test-label] info: Test message\n';
    await testUtils.sleep(20);
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual(expected);
});

test('Test error level', async () => {
    logger.error('Error', 'Some error');
    expected = '1970-01-01T00:00:00.000Z [Error] error: Some error\n';
    await testUtils.sleep(20);
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual(expected);
});

test('Test warn level - default label', async () => {
    logger.warning('Some warning');
    expected = '1970-01-01T00:00:00.000Z [Warning] warn: Some warning\n';
    await testUtils.sleep(20);
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual(expected);
});

test('Test warn level - custom label', async () => {
    logger.warning('Some warning', 'label');
    expected = '1970-01-01T00:00:00.000Z [label] warn: Some warning\n';
    await testUtils.sleep(20);
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual(expected);
});

test('Test info level - default label', async () => {
    logger.info('Some info');
    expected = '1970-01-01T00:00:00.000Z [Info] info: Some info\n';
    await testUtils.sleep(20);
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual(expected);
});

test('Test info level - custom label', async () => {
    logger.info('Some info', 'label');
    expected = '1970-01-01T00:00:00.000Z [label] info: Some info\n';
    await testUtils.sleep(20);
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual(expected);
});


test('Test stop logging', () => {
    logger.stopLogging();
    logger.log('info', 'message', 'label');
    const contents = sandbox.tmpDir.read('test.log');
    expect(contents)
        .toStrictEqual('');
});
