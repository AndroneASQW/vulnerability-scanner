const jetpack = require('fs-jetpack');
const mockDate = require('mockdate');
const path = require('path');
const fs = require('fs');
const os = require('os');

const diskIO = require('../../src/utils/diskIO');

test('Test that YAML files are correctly loaded', () => {
    const expected = {
      test1: 'test',
      test2: {
        testList: ['item1', 'item2', 'item3'],
      },
    };
    expect(diskIO.parseYaml('tests/data/testYAML.yaml'))
        .resolves
        .toStrictEqual(expected);
});

test('Test file path generation - no directory creation 1', () => {
    mockDate.set(1234567);
    const expected = (
        'tmpDir/test/sources/https:____www_test_com__testing_html_1234567.json'
    );
    expect(diskIO.generateNewsFilePath(
        'tmpDir/test', 'sources', 'https://www.test.com/testing.html', false
    ))
        .toStrictEqual(expected);
    mockDate.reset();
});

test('Test file path generation - no directory creation 2', () => {
    const tmp = jetpack.tmpDir({basePath: os.tmpdir()});
    tmp.dir('sources');
    const dataDir = tmp.cwd();
    mockDate.set(1234567);
    const expected = path.join(
        dataDir,
        'sources',
        'https:____www_test_com__testing_html_1234567.json'
    );
    expect(diskIO.generateNewsFilePath(
        dataDir, 'sources', 'https://www.test.com/testing.html', true
    ))
        .toStrictEqual(expected);
    mockDate.reset();
    tmp.remove();
});

test('Test file path generation - with directory creation', () => {
    const tmp = jetpack.tmpDir({basePath: os.tmpdir()});
    const dataDir = tmp.cwd();
    const sourceDir = 'some_source/news';
    const url = 'https://www.test.com/testing.html';
    const fileName = 'https:____www_test_com__testing_html_1234567.json';
    mockDate.set(1234567);

    const expected = `${dataDir}/${sourceDir}/${fileName}`; 

    expect(diskIO.generateNewsFilePath(dataDir, sourceDir, url, true))
        .toStrictEqual(expected);

    mockDate.reset();
    tmp.remove();
});

test('Test writing data to file', () => {
    const tmp = jetpack.tmpDir({basePath: os.tmpdir()});
    const dataDir = tmp.cwd();
    const filePath = path.join(dataDir, 'file.txt');

    diskIO.writeDataToFile(filePath, 'Test ăâîșț');

    expect(fs.existsSync(filePath)).isTrue;
    expect(fs.readFileSync(filePath, {encoding: 'utf-8'}))
        .toStrictEqual('Test ăâîșț');

    tmp.remove();
});

test('Test writing news data', () => {
    const tmp = jetpack.tmpDir({basePath: os.tmpdir()});
    const dataDir = tmp.cwd();
    const sourceDir = 'some-source';
    mockDate.set(1234567);
    const dataToWrite = {
        url: 'https://www.test.com/testing.html',
    };

    const expectedFilePath = path.join(
        dataDir,
        sourceDir,
        'https:____www_test_com__testing_html_1234567.json',
    );

    diskIO.writeNewsData(dataDir, sourceDir, dataToWrite);

    expect(fs.existsSync(expectedFilePath)).isTrue;
    expect(JSON.parse(fs.readFileSync(expectedFilePath).toString()))
        .toStrictEqual(dataToWrite);
    
    mockDate.reset();
    tmp.remove();
});
