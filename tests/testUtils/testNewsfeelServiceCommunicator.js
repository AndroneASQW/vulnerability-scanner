const nfsComm = require('../../src/utils/newsfeelServiceCommunicator');
const nfsCommErrors = require('../../src/errors/newsfeelServiceErrors');

test('Test newsfeelServiceCommunicator constructor.', () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    expect(comm.props.get("newsfeel.service.endpoint")).toBe("test-newsfeel-service-endpoint");
    expect(comm.props.get("newsfeel.service.have-in-database.endpoint")).toBe("test-have-in-database-endpoint");
    expect(comm.props.get("newsfeel.service.have-in-database-multiple.endpoint")).toBe("test-have-in-database-multiple-endpoint");
    expect(comm.props.get("newsfeel.service.insert.one.endpoint")).toBe("test-have-in-database-endpoint");
});

test('Send data to newsfeel-service.', async () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    jest.spyOn(comm.requestFunctions, "POST").mockImplementation((_url, valid_data_flag, _attr) => {
        if (valid_data_flag) {
            return {
                statusText: "OK",
                data: "Success",
                statusCode: 200,
            };
        } else {
            return {
                statusText: "FAIL",
                statusCode: 404,
            };
        }
    });
    
    let response = await comm.send(true);
    expect(response.statusText).toBe("OK");
    expect(response.data).toBe("Success");
    await expect(comm.send(false)).rejects.toThrowError("Error connecting to doing a POST at test-have-in-database-endpoint: 404: FAIL");
});

test('Send data to newsfeel-service - Response not ok', async () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    jest.spyOn(comm.requestFunctions, "POST").mockImplementation((_url, valid_data_flag, _attr) => {
        if (valid_data_flag) {
            return {
                data: "Success",
                statusCode: 400,
                statusText: 'Test Error'
            };
        }
    });
    try {
        await comm.send('Something');
    } catch (error) {
        expect(error)
            .toBeInstanceOf(nfsCommErrors.NewsFeelServiceHTTPError);
        expect(error.method).toStrictEqual('POST');
        expect(error.statusCode).toStrictEqual(400);
        expect(error.errorMessage).toStrictEqual('Test Error');
    }
});

test('Get missing URLs.', async () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    jest.spyOn(comm.requestFunctions, "POST").mockImplementation((nfsEndpoint, urls, _attr) => {
        if (urls.length == 1 && urls[0] == "trigger_error") {
            throw new Error("invalid urls list");
        }

        if (urls.length == 1) {
            expect(nfsEndpoint).toBe("test-have-in-database-endpoint");
        } else {
            expect(nfsEndpoint).toBe("test-have-in-database-multiple-endpoint");
        }
        
        let result = {};
        urls.forEach(url => {
            result[url] = true;
            if (!url.startsWith("existing")) {
                result[url] = false;
            }
        });

        return {
            statusText: "OK",
            statusCode: 200,
            data: result
        };
    });
    
    let urls = await comm.dbContains([]);
    expect(urls).toStrictEqual({});
    urls = await comm.dbContains(["existing"]);
    expect(urls).toStrictEqual({"existing": true});
    urls = await comm.dbContains(["non-existing"]);
    expect(urls).toStrictEqual({"non-existing": false});
    urls = await comm.dbContains(["non-existing1", "existing", "non-existing2"]);
    expect(urls).toStrictEqual({"non-existing1": false, "non-existing2": false, "existing": true});
    await expect(comm.dbContains(["trigger_error"])).rejects.toThrowError("invalid urls list");
});

test('Get missing URLs - Response not ok', async () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    jest.spyOn(comm.requestFunctions, "POST").mockImplementation((nfsEndpoint, urls, _attr) => {
        if (urls.length == 1 && urls[0] == "trigger_error") {
            throw new Error("invalid urls list");
        }

        if (urls.length == 1) {
            expect(nfsEndpoint).toBe("test-have-in-database-endpoint");
        } else {
            expect(nfsEndpoint).toBe("test-have-in-database-multiple-endpoint");
        }
            
        return {
            data: "",
            statusCode: 400,
            statusText: 'Test Error',
        };
    });
    
    try {
        await comm.dbContains(['a', 'b']);
    } catch (error) {
        expect(error)
            .toBeInstanceOf(nfsCommErrors.NewsFeelServiceHTTPError);
        expect(error.method).toStrictEqual('POST');
        expect(error.statusCode).toStrictEqual(400);
        expect(error.errorMessage).toStrictEqual('Test Error');
    }
});

test('Get new urls.', async () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    jest.spyOn(comm.requestFunctions, "POST").mockImplementation((nfsEndpoint, urls, _attr) => {
        if (urls.length == 1 && urls[0] == "trigger_error") {
            throw new Error("invalid urls list");
        }

        expect(nfsEndpoint).toBe("test-batch-news-does-not-exist");
        
        let result = [];
        urls.forEach(url => {
            if (!url.startsWith("existing")) {
                result.push(url);
            }
        });

        return {
            statusText: "OK",
            statusCode: 200,
            data: result
        };
    });
    
    let urls = await comm.getNewUrls([]);
    expect(urls).toStrictEqual([]);
    urls = await comm.getNewUrls(["existing"]);
    expect(urls).toStrictEqual([]);
    urls = await comm.getNewUrls(["non-existing"]);
    expect(urls).toStrictEqual(["non-existing"]);
    urls = await comm.getNewUrls(["non-existing1", "existing", "non-existing2"]);
    expect(urls).toStrictEqual(["non-existing1", "non-existing2"]);
    await expect(comm.getNewUrls(["trigger_error"])).rejects.toThrowError("invalid urls list");
});

test('Get new URLs - Response not ok', async () => {
    let comm = new nfsComm.NewsFeelServiceCommunicator("tests/testUtils/test.extractor.properties");
    jest.spyOn(comm.requestFunctions, "POST").mockImplementation((nfsEndpoint, urls, _attr) => {
        if (urls.length == 1 && urls[0] == "trigger_error") {
            throw new Error("invalid urls list");
        }

        expect(nfsEndpoint).toBe("test-batch-news-does-not-exist");
            
        return {
            data: "",
            statusCode: 400,
            statusText: 'Test Error',
        };
    });
    
    try {
        await comm.getNewUrls(['a', 'b']);
    } catch (error) {
        expect(error)
            .toBeInstanceOf(nfsCommErrors.NewsFeelServiceHTTPError);
        expect(error.method).toStrictEqual('POST');
        expect(error.statusCode).toStrictEqual(400);
        expect(error.errorMessage).toStrictEqual('Test Error');
    }
});
